<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo on 麦茶小站</title><link>https://chengyuan-artist.github.io/tags/hugo/</link><description>Recent content in Hugo on 麦茶小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>麦茶</copyright><lastBuildDate>Thu, 23 Sep 2021 23:02:40 +0800</lastBuildDate><atom:link href="https://chengyuan-artist.github.io/tags/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugo博客搭建</title><link>https://chengyuan-artist.github.io/posts/blog_creation/</link><pubDate>Thu, 23 Sep 2021 23:02:40 +0800</pubDate><guid>https://chengyuan-artist.github.io/posts/blog_creation/</guid><description>&lt;p>记录Hugo博客搭建的过程&lt;/p>
&lt;h1 id="博客搭建">博客搭建&lt;/h1>
&lt;blockquote>
&lt;p>本文初步设定按照时间顺序，记录博客搭建的过程和踩过的坑，以及过程中学会的新姿势（&lt;/p>
&lt;/blockquote>
&lt;h2 id="技术栈选择">技术栈选择&lt;/h2>
&lt;blockquote>
&lt;p>Hugo + GitHub Page&lt;/p>
&lt;/blockquote>
&lt;p>搭博客这个想法年初就有了，git仓库也建好了，结果一直咕到现在。。。&lt;/p>
&lt;p>搭之前参考了一下周围同龄人大佬的技术栈，基本上分为Hexo和Hugo两类。逛了一下Hugo git仓库发现是拿go写的，果断选择Hugo（不得不说，go确实优美）。也是早早听说Github有免费托管网页的功能，因为相较其他部署方法（服务器Netlify等）感觉比较方便，所以选择了Github page。&lt;/p>
&lt;p>直到暑假NUS夏令营接触了一下云服务器，开学看了计网自顶而下的应用层部分，才知道HTTP协议，网络应用通信的基本原理有多简单。后悔没有早点了解，一直云里雾里。&lt;/p>
&lt;h2 id="hugo安装">Hugo安装&lt;/h2>
&lt;blockquote>
&lt;p>Windows 11&lt;/p>
&lt;/blockquote>
&lt;p>一定要记得下载extend版本，非extend版本不支持Sass/SCSS扩展&lt;/p>
&lt;p>Hugo并不提供installer安装版本，需要自行从git仓库下载对应版本安装包并解压。&lt;/p>
&lt;p>对于具体的安装，&lt;a class="link" href="https://gohugo.io/getting-started/installing/" target="_blank" rel="noopener"
>官方文档&lt;/a>还贴心地给出了面对Technical Users和Less-technical Users的不同教程（，然而在Technical Users一栏在PowerShell中配置Path的方法是临时的。好奇PowerShell有没有像Linux &lt;code>.bashrc&lt;/code>配置文件一样的东西，经过一番google发现确实有，Ps用一个叫profile的文件管理启动配置。于是马上按&lt;a class="link" href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.1#how-to-create-a-profile" target="_blank" rel="noopener"
>文档&lt;/a>来创建。&lt;/p>
&lt;p>创建&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(!(&lt;/span>&lt;span class="nb">Test-Path&lt;/span> &lt;span class="n">-Path&lt;/span> &lt;span class="nv">$PROFILE&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">New-Item&lt;/span> &lt;span class="n">-ItemType&lt;/span> &lt;span class="n">File&lt;/span> &lt;span class="n">-Path&lt;/span> &lt;span class="nv">$PROFILE&lt;/span> &lt;span class="n">-Force&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编辑&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">code&lt;/span> &lt;span class="nv">$PROFILE&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>配置&lt;code>.ps1&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">InitPath&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$env:Path&lt;/span> &lt;span class="p">+=&lt;/span> &lt;span class="s2">&amp;#34;;D:\Coding\Hugo\bin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">InitPath&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>研究了一下，Ps的&lt;code>$env:path&lt;/code>变量保存的初值是系统path+用户path，这条语句只会改变当前ps命令行的path值，不会影响系统变量。&lt;/p>
&lt;/blockquote>
&lt;p>兴高采烈打开新Ps窗口，结果一大堆红字就跳了出来，貌似是没有脚本运行权限。又search一番发现，原来ps默认禁止配置脚本运行（晕。查阅有关&lt;a class="link" href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.1" target="_blank" rel="noopener"
>文档&lt;/a>，在Ps中&lt;code>Get-ExecutionPolicy&lt;/code>的默认值为&lt;code>Restricted&lt;/code>，不允许任何配置脚本文件运行，把此值改为&lt;code>RemoteSigned&lt;/code>即可&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Set-ExecutionPolicy&lt;/span> &lt;span class="n">-ExecutionPolicy&lt;/span> &lt;span class="n">RemoteSigned&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;code>RemoteSigned&lt;/code>默认为Windows server的权限属性&lt;/p>
&lt;p>&lt;code> Restricted&lt;/code>默认为Windows client的权限属性（安全性考虑？普通用户真就不当人呗）&lt;/p>
&lt;/blockquote>
&lt;p>至此，Hugo终于安装好了。&lt;/p>
&lt;p>&lt;code>ArchLinux&lt;/code>的安装只需要一行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo pacman -Syu hugo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>泪目了&lt;/p>
&lt;p>按照传统异能&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">hugo&lt;/span> &lt;span class="n">version&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>显示&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">hugo v0.88.1-5BC54738+extended windows/amd64 BuildDate=2021-09-04T09:39:19Z VendorInfo=gohugoio
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="hugo配置">Hugo配置&lt;/h2>
&lt;p>Hugo使用&lt;code>config.toml&lt;/code>文件来进行具体配置。除了一些通用配置外，剩下的配置基本都是根据你选定的主题xjb魔改就行了。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">hugo new site blog
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cd blog
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>初始化git仓库&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>主题最好以submodule的形式添加，便于更新&lt;/p>
&lt;p>这里在&lt;code>themes&lt;/code>文件夹下添加了&lt;a class="link" href="https://github.com/dillonzq/LoveIt/" target="_blank" rel="noopener"
>LoveIt&lt;/a>主题&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在配置文件&lt;code>config.toml&lt;/code>中添加&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">theme&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;LoveIt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>剩下的配置按照&lt;a class="link" href="https://hugoloveit.com/zh-cn/theme-documentation-basics/#basic-configuration" target="_blank" rel="noopener"
>LoveIt官方文档&lt;/a>和&lt;code>themes/LoveIt&lt;/code>目录下的&lt;code>exampleSite&lt;/code>魔改即可。&lt;/p>
&lt;p>对于文章创建，Hugo使用&lt;code>Archetypes&lt;/code>下的模板为你生成博客文件，不同主题都有自己不同的模板，使用命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">hugo new posts/first_post.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>即可按照模板生成文档。&lt;/p>
&lt;p>或者，&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">hugo new posts/first_post/index.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样便于将图片等资源放在文档同一目录下，便于索引。见Hugo文档&lt;a class="link" href="https://gohugo.io/content-management/page-bundles/#leaf-bundles" target="_blank" rel="noopener"
>Leaf Bundles&lt;/a>&lt;/p>
&lt;p>另外，在查文档时还了解到用日期年月日来形成url索引文章的方式，如 9/23/21/hello.md。有空再去了解&lt;/p>
&lt;p>在配置网站的过程中，使用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">hugo server -D
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以实时查看网站的变化&lt;/p>
&lt;p>当调整满意后，使用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">hugo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>生成静态网站，默认输出在&lt;code>public&lt;/code>目录&lt;/p>
&lt;h2 id="部署">部署&lt;/h2>
&lt;p>一开始的想法是在Github建两个仓库，一个存网站Hugo源码，gitignore&lt;code>public&lt;/code>文件更新；另一个以&lt;code>username.github.io &lt;/code>命名的仓库上传&lt;code>public&lt;/code>的内容，逻辑看起来很清晰，对吧。但一开始直接犯蠢把Hugo源码发到&lt;code>username.github.io&lt;/code>仓库了，结果Github page部署选择没法选&lt;code>public&lt;/code>子文件，由于git姿势不够，遂把整个库删了&amp;hellip; 后来搞了两个仓库，又忘记ignore&lt;code>public&lt;/code>，直接在&lt;code>public&lt;/code>下新建git仓库，当时就感觉有点不对劲，因为这样的操作会导致&lt;code>public&lt;/code>文件下的每个更新都会影响到整颗文件树，而本意是希望二者相对独立互不干扰（虽说加了gitignore当前情境下就没问题了，但毕竟是个一般性问题）。参考了&lt;a class="link" href="https://zhuanlan.zhihu.com/p/37752930" target="_blank" rel="noopener"
>这篇博客&lt;/a>，发现git还有&lt;code>git worktree add&lt;/code>操作，就是为了解决上述问题，新姿势get。&lt;/p>
&lt;p>这篇博客中提出了两种部署方法&lt;/p>
&lt;ol>
&lt;li>
&lt;p>将hugo输出文件的默认文件夹名称改为docs&lt;/p>
&lt;p>只需要在&lt;code>config.toml&lt;/code>中添加&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">publishDir&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">docs&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>即可&lt;/p>
&lt;p>随后可以直接修改GitHub page部署&lt;code>docs&lt;/code>下的网页。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在&lt;code>public&lt;/code>文件夹下建立独立分支&lt;/p>
&lt;p>配置GitHub page部署该独立分支的内容&lt;/p>
&lt;p>代码如下（示例）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">//忽略public子目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo &amp;#34;public&amp;#34; &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//初始化publish branch
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout --orphan publish
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git reset --hard
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit --allow-empty -m &amp;#34;init publish branch&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin publish
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 部署
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rm -rf public
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir public
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rm -rf .git/worktrees/public/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 在public下建立publish独立分支pulish
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// index reset 至远端 publish
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git worktree add -B publish public origin/publish
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hugo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cd public
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add --all
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -m &amp;#34;some words&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin publish
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个方法的好处是可以将源文档和生成的网页文档的版本历史&lt;strong>分开控制&lt;/strong>&lt;/p>
&lt;p>有关git worktree 相关知识，下篇博客总结一下（咕咕咕&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>发现Netlify不仅有CDN服务器，还支持git仓库自动部署，直接run去Netlify了 (逃)&lt;/p></description></item></channel></rss>